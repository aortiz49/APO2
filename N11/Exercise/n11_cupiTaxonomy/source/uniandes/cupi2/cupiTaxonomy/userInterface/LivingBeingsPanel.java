/*
 * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 * University of the Andes
 * Department of Systems and Computer Engineering
 * Licensed under Academic Free License version 2.1
 * Project Cupi2 (http://cupi2.uniandes.edu.co)
 * Exercise: n11_taxonomicTree
 * Author: Andres Ortiz
 * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 */

package uniandes.cupi2.cupiTaxonomy.userInterface;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;

import javax.swing.*;
import javax.swing.border.CompoundBorder;
import javax.swing.border.EmptyBorder;
import javax.swing.border.LineBorder;
import javax.swing.border.TitledBorder;

import uniandes.cupi2.cupiTaxonomy.world.LivingBeing;

/**
 * Panel containing the information of the living beings in the taxonomic tree.
 */
@SuppressWarnings({"rawtypes", "serial", "unchecked"})
public class LivingBeingsPanel extends JPanel implements ActionListener {
    // -----------------------------------------------------------------
    // Constants
    // -----------------------------------------------------------------

    /**
     * Constant that represents the command to view a living being in detail.
     */
    private final static String SHOW = "Show details";

    // -----------------------------------------------------------------
    // User interface attributes
    // -----------------------------------------------------------------

    /**
     * List containing the living beings.
     */
    private JList listLivingBeings;

    /**
     * Scroll panel containing the living beings' information.
     */
    private JScrollPane scroll;

    /**
     * Button to show the living beings' information.
     */
    private JButton btnShow;

    // -----------------------------------------------------------------
    // Constructor
    // -----------------------------------------------------------------

    /**
     * Constructs the visualization panel of the living beings.
     * <b> post: </b> The panel was created with all its graphical components.
     */
    public LivingBeingsPanel() {
        setLayout(new BorderLayout());
        setBorder(new CompoundBorder(new EmptyBorder(0, 5, 0, 5),
                                     new TitledBorder(" Living beings ")));
        setPreferredSize(new Dimension(250, 0));

        listLivingBeings = new JList();
        listLivingBeings.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

        DefaultListCellRenderer renderer = new LivingBeingsListRenderer();
        listLivingBeings.setCellRenderer(renderer);

        scroll = new JScrollPane(listLivingBeings);
        scroll.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_NEVER);
        scroll.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_ALWAYS);
        scroll.setBorder(
                new CompoundBorder(new EmptyBorder(3, 3, 3, 3), new LineBorder(Color.BLACK, 1)));

        btnShow = new JButton(SHOW);
        btnShow.setActionCommand(SHOW);
        btnShow.addActionListener(this);

        add(scroll, BorderLayout.CENTER);
        add(btnShow, BorderLayout.SOUTH);
    }

    // -----------------------------------------------------------------
    // Methods
    // -----------------------------------------------------------------

    /**
     * Updates the list of living beings with the list given by the parameter.
     *
     * @param pNewList The list of living beings.
     *                 pNewList != null.
     */
    public void refresh(ArrayList pNewList) {
        listLivingBeings.setListData(pNewList.toArray());
        if (!pNewList.isEmpty()) {
            listLivingBeings.setSelectedIndex(0);
        }
    }

    /**
     * Button events manager.
     *
     * @param pEvent Action generated by the event. pEvent != null.
     */
    public void actionPerformed(ActionEvent pEvent) {
        String command = pEvent.getActionCommand();
        if (command.equals(SHOW)) {
            if (listLivingBeings.getSelectedValue() != null) {
                LivingBeing being = (LivingBeing) listLivingBeings.getSelectedValue();
                ShowLivingBeingDialogue dialogue = new ShowLivingBeingDialogue(being);
                dialogue.setLocationRelativeTo(this);
                dialogue.setVisible(true);
            }
        }
    }
}
